====================
About this file
====================
This is an annotated version of an assembly-language file.
Differences between this and a normal file:
- Visible dividers like "-------" at the start of a line indicate a section; the first line in between those "-------"s is the name of that section
- To add comments to a whole section:  put comments after the first line between the "------"s
- To add comments at the end of a line:  put a ";" and start typing
- lines might end in comments, which start with ";"
- This first section is wholly optional, just for your own notes

Special section names are:
	Identifiers
	Integers
	Functions
	All subsections of "Functions"
	
Keywords in function headers are:
	function:
	class:
	parameters:
	return:

Every other section is a comment.
Anything after a ";" is a comment.
Annotate this file however you like.
To generate a stripped-down version of it, add _______ to your project settings, or as a variable at the top of your file.

		
====================
The Program
====================
var q = 4;
var x = scale (q, 5) * 2;

scale (one, two): {
	var result = 0;
	result = one * two;
	return result;
}

====================
Identifiers
====================
q
x
scale
one
two
result

====================
Integers
====================
4
5
2
0

====================
Functions

Skipping the concept of objects and "this" for now.  Just doing functions, execution, local variables.
====================

--------------------
function: __globalScript
class: none
parameters: none
return: noneDeclared
code:
	var q = 4;
	var x = scale (q, 5) * 2;
--------------------
identifier 1		; q.			Stack: &identifier1
declare				; declare q.	Stack: 
identifier 1		; q.			Stack: &identifier1
find				; 				Stack: &q
integer 1			; 4.			Stack: &q &integer1
load				; 				Stack: &q 4
assign				; q = 4.		Stack: 
identifier 2		; x				Stack: &identifier2
declare				; declare x.	Stack: 
identifier 2		; x				Stack: &identifier2
find				; 				Stack: &x
identifier 1		; q				Stack: &x &identifier1
find				; 				Stack: &x &q
load				; 				Stack: &x q
integer 2			; 5				Stack: &x q &integer2
load				; 				Stack: &x q 5
pushThis			;				Stack: &x q 5 &this. Note: this is null, hence global.
identifier 3		; scale			Stack: &x q 5 &this &identifier3
findInObject		; 				Stack: &x q 5 &this &scale

pushMethodFrameWithParameters 2		; Leaves implementation of method frame to implementor of VM.  Method frame consumes a "this" pointer and the specified number of parameters.  Method will leave a return value on the stack if it has one.

invokeMethod		; Call this.scale (q, 5).  Will return to here.

integer 3			; 2							Stack: &x resultOfScale &integer3
load				; 							Stack: &x resultOfScale 2
multiply			; 							Stack: &x resultOfScale*2
assign				; x = 2*resultOfScale()		Stack: (empty)
exit				; Done.


--------------------
function: scale
class: none
parameters: one, two
return: noneDeclared
code:
	var result = 0;
	result = one * two;
	return result;
	
By the time we get here, the VM has allocated and filled in the parameters, so we can invoke them.
--------------------
identifier 6		; result	Stack: &identifier6
declare				; 			Stack: (empty)
identifier 6		; result	Stack: &identifier6
find				; 			Stack: &result
integer 4			; 0			Stack: &result 0
assign				; 			Stack: (empty)
identifier 6		; result	Stack: &identifier6
find				;			Stack: &result
identifier 4		; one		Stack: &result &identifier4
find				; 			Stack: &result &one
identifier 5		; two		Stack: &result &one &identifier5
find				; 			Stack: &result &one &two
multiply			;			Stack: &result one*two
assign				;			Stack: (empty)
identifier 6		;			Stack: &identifier6
find				;			Stack: &result
return 1			;			Stack: (empty)
