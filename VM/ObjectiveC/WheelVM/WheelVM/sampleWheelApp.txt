====================
About this file
====================
This is an annotated version of an assembly-language file.

Special section names are:
	Identifiers
	Integers
	Functions
	All subsections of "Functions"
	
Keywords in function headers are:
	function:
	class:
	parameters:
	return:

Every other section is a comment.
Anything after a ";" is a comment.
Annotate this file however you like.

To generate a stripped-down version of it, add (blah-blah-blah)
to your project settings, or as a variable at the top of your file.

		
====================
The Program
====================
var q = 4;
var x = scale (q, 5) * 2;

scale (one, two): {
	var result = 0;
	result = one * two;
	return result;
}


====================
Identifiers
====================
q
x
scale
one
two
result


====================
Integers
====================
4
5
2
0


====================
Functions

Skipping the concept of objects and "this" for now.  Just doing functions, execution, local variables.
====================

--------------------
function: __globalScript
class: none
parameters: none
return: noneDeclared
code:
	q = 4;
	x = scale (q, 5) * 2;
--------------------
findAndMaybeDeclare 0	; q					Stack: &q
integer 0				; 4					Stack: &q &integer1
assign					; q = 4				Stack: (empty)
findAndMaybeDeclare 1	; x					Stack: (empty)
find 0					; q					Stack: &x &q
integer 1				; 5					Stack: &x q &integer2
find 2					; scale				Stack: &x q 5 &this &scale
invokeMethod 2			; run method with 2 params.  Will return to here.
integer 2				; 2					Stack: &x scale() &integer3
multiply				; 					Stack: &x scale() * 2
assign					; x = 2*scale()		Stack: (empty)
exit 0					; Done.


--------------------
function: scale
class: none
parameters: one, two
return: noneDeclared
code:
	var result = 0;
	result = one * two;
	return result;
	
By the time we get here, the VM has allocated and filled in the parameters, so we can invoke them.
--------------------
declareAndFind 5	; result	Stack: &result
integer 3			; 0			Stack: &result 0
assign				; 			Stack: (empty)
find 5				; result	Stack: &result
find 3				; one		Stack: &result &one
find 4				; two		Stack: &result &one &two
multiply			;			Stack: &result one*two
assign				;			Stack: (empty)
find 5				;			Stack: &result
return 1			;			Stack: (empty)
